# coding=utf-8
import os

from twisted.internet import ssl
from twisted.internet import reactor

from system.protocols.generic.factory import BaseFactory

__author__ = 'Gareth Coles'


class Factory(BaseFactory):
    def connect(self):
        networking = self.config["network"]
        context = self._get_client_context()

        if context is None:
            self.factory_manager.remove_protocol(self.name)
            return

        reactor.connectSSL(
            networking["address"],
            networking["port"],
            self,
            context,
            120
        )

    def _get_client_context(self):
        # Check if a cert file is specified in config
        if ("certificate" in self.config["identity"] and
                self.config["identity"]["certificate"]):
            # Attempt to load it
            try:
                self.logger.debug("Attempting to load certificate file")
                from OpenSSL import crypto, SSL
                cert_file = self.config["identity"]["certificate"]
                # Check if cert file exists, and if not, create it
                if not os.path.exists(cert_file):
                    self.logger.info("Certificate file does not exist - "
                                     "generating...")
                    # Creates a key similarly to the official mumble client
                    pkey = crypto.PKey()
                    pkey.generate_key(crypto.TYPE_RSA, 2048)
                    cert = crypto.X509()
                    cert.set_version(2)
                    cert.set_serial_number(1000)
                    cert.gmtime_adj_notBefore(0)
                    cert.gmtime_adj_notAfter(60 * 60 * 24 * 365 * 20)
                    cert.set_pubkey(pkey)
                    cert.get_subject().CN = self.config["identity"]["username"]
                    cert.set_issuer(cert.get_subject())
                    cert.add_extensions([
                        crypto.X509Extension("basicConstraints", True,
                                             "CA:FALSE"),
                        crypto.X509Extension("extendedKeyUsage", False,
                                             "clientAuth"),
                        # The official Mumble client does this, but it errors
                        # here, and I'm not sure it's required for certs where
                        # CA is FALSE (RFC 3280, 4.2.1.2)
                        # crypto.X509Extension("subjectKeyIdentifier", False,
                        #                      "hash"),
                        crypto.X509Extension("nsComment", False,
                                             "Generated by Ultros"),
                    ])
                    cert.sign(pkey, "sha1")
                    p12 = crypto.PKCS12()
                    p12.set_privatekey(pkey)
                    p12.set_certificate(cert)
                    cert_file_dir = os.path.dirname(cert_file)
                    if not os.path.exists(cert_file_dir):
                        self.logger.debug("Creating directories for cert file")
                        os.makedirs(cert_file_dir)
                    with open(cert_file, "wb") as cert_file_handle:
                        cert_file_handle.write(p12.export())

                # Load the cert file
                with open(cert_file, "rb") as cert_file_handle:
                    certificate = crypto.load_pkcs12(cert_file_handle.read())

                # Context factory class, using the loaded cert
                class CtxFactory(ssl.ClientContextFactory):
                    def getContext(self):
                        self.method = SSL.SSLv23_METHOD
                        ctx = ssl.ClientContextFactory.getContext(self)
                        ctx.use_certificate(certificate.get_certificate())
                        ctx.use_privatekey(certificate.get_privatekey())
                        return ctx

                self.logger.info("Loaded specified certificate file")
                return CtxFactory()
            except ImportError:
                self.logger.error("Could not import OpenSSL - cannot connect "
                                  "with certificate file")
            except IOError:
                self.logger.error("Could not load cert file")
                self.logger.debug("Exception info:", exc_info=1)
            except Exception:
                self.logger.exception("Unknown error while loading "
                                      "certificate file")
            return None
        else:
            # Default CtxFactory for no certificate
            self.logger.info("No certificate specified - connecting without "
                             "certificate")
            return ssl.ClientContextFactory()
